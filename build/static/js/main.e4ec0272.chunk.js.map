{"version":3,"sources":["api/index.js","components/CommentForm.js","components/ContactView.js","components/ContactForm.js","index.js"],"names":["url","a","method","sendData","fetchOptions","headers","body","JSON","stringify","fetch","response","json","data","fetchAPI","CommentForm","handleClick","useState","comment","setComment","className","onSubmit","event","preventDefault","type","value","rows","columns","onChange","target","placeholder","ContactView","contactList","setEditableContact","setContactList","toUpperCase","map","contact","contactType","name","address","phoneNumber","email","onClick","id","filter","deleted","console","log","to","content","payload","then","resp","newList","idx","indexOf","comments","push","catch","error","commentIdx","splice","ContactForm","props","addNewContact","updateContact","CONTACT_OPTIONS","setName","setAddress","setPhoneNumber","setEmail","setContactType","madeChanges","setMadeChanges","useEffect","contactInfo","editContact","newContact","App","editableContact","search","setSearch","filteredContacts","toLowerCase","includes","contacts","path","updatedContact","index","findIndex","contactListCopy","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"wWAAA,WAAwBA,GAAxB,mCAAAC,EAAA,6DAA6BC,EAA7B,+BAAoC,MAAOC,EAA3C,+BAAoD,KAC1CC,EAAe,CACnBF,OAAQA,EACRG,QAAS,CACP,eAAgB,mBAChB,cAAiB,uKAIjBF,IACFC,EAAaE,KAAOC,KAAKC,UAAUL,IAVzC,SAa2BM,MAAMT,EAAKI,GAbtC,cAaUM,EAbV,gBAcuBA,EAASC,OAdhC,cAcUC,EAdV,yBAgBWA,GAhBX,6C,sBAmBiBC,M,4CCSFC,G,YAzBK,SAAC,GAEd,IADHC,EACE,EADFA,YACE,EAC4BC,mBAAS,IADrC,mBACKC,EADL,KACcC,EADd,KAGF,OAAO,uBAAMC,UAAU,eACVC,SAAU,SAACC,GACpBA,EAAMC,iBACFL,IACJF,EAAYE,GACZC,EAAW,MALR,UAQH,0BACIK,KAAK,OACLC,MAAOP,EACPQ,KAAK,IACLC,QAAQ,KACRC,SAAU,WAAOT,EAAWG,MAAMO,OAAOJ,QACzCK,YAAY,YAEhB,6DC0DOC,EA5EK,SAAC,GAKd,IAJHC,EAIE,EAJFA,YACAC,EAGE,EAHFA,mBACAC,EAEE,EAFFA,eACAV,EACE,EADFA,KAGA,OAAO,sBAAKJ,UAAU,OAAf,UACH,6BAAKI,EAAKW,gBACTH,EAAYI,KAAI,SAAAC,GACb,OAAQb,IAASa,EAAQC,YAAc,sBAC3BlB,UAAU,UADiB,UAEnC,sBAAKA,UAAU,OAAf,UACI,+BAAKiB,EAAQE,KAAb,KAAqBF,EAAQC,YAA7B,OACA,0CAAaD,EAAQG,WACrB,yCAAYH,EAAQI,eACpB,wCAAWJ,EAAQK,YAEvB,sBAAKtB,UAAU,UAAf,UACI,wBAAQuB,QAAO,sBAAE,4BAAAzC,EAAA,sEAEHD,EAFG,+DAE2DoC,EAAQO,IAFnE,SAGU9B,EAASb,EAAK,UAHxB,cAITiC,EAAeF,EAAYa,QAAO,SAAAC,GAC9B,OAAOT,IAAYS,MALd,gDAQTC,QAAQC,IAAR,MARS,yDAAjB,oBAWA,cAAC,IAAD,CAAMC,GAAG,QAAT,SAAiB,wBAAQN,QAAS,WAC9BV,EAAmBI,IADN,oBAGjB,cAAC,EAAD,CAAarB,YAAW,uCAAE,WAAOkC,GAAP,eAAAhD,EAAA,6DAChBiD,EAAU,CACZD,QAASA,GAFS,kBAMZpC,EAAS,wDAAD,OAAyDuB,EAAQO,GAAjE,aACF,OACAO,GACPC,MAAK,SAACC,GACH,IAAMC,EAAO,YAAOtB,GAChBuB,EAAMD,EAAQE,QAAQnB,GAC1BiB,EAAQC,GAAKE,SAASC,KAAKL,EAAKnC,SAChCgB,EAAeoB,MACZK,MAAMZ,QAAQa,OAdP,sDAeNb,QAAQC,IAAR,MAfM,wDAAF,2DAkB1BX,EAAQoB,SACNpB,EAAQoB,SAASrB,KAAI,SAAClB,EAASqC,GAC/B,OAAO,sBACKnC,UAAU,UADf,UAEC,4BAAIF,EAAQgC,UACZ,wBAAQP,QAAO,sBAAE,gCAAAzC,EAAA,+EAEHY,EAAS,wDAAD,OAAyDI,EAAQ0B,IAAM,UAF5E,OAGHU,EAHG,YAGWtB,GAChBuB,EAAMD,EAAQE,QAAQnB,GACtBwB,EAAaP,EAAQC,GAAKE,SAASD,QAAQtC,GAC/CoC,EAAQC,GAAKE,SAASK,OAAOD,EAAY,GACzC3B,EAAeoB,GAPN,kDASTP,QAAQC,IAAR,MATS,0DAAjB,sBAHSO,MAgBZ,OA3DoClB,EAAQO,IA6DhD,YCqDNmB,G,MA7HK,SAACC,GAQbA,EANA9B,eAMA8B,EALAhC,YAHwB,IAIxBiC,EAIAD,EAJAC,cACArB,EAGAoB,EAHApB,GACAsB,EAEAF,EAFAE,cACAjC,EACA+B,EADA/B,mBAGEkC,EAAkB,CAAC,cAAe,OAAQ,WAAY,SAVjC,EAYHlD,mBAAS,IAZN,mBAYpBsB,EAZoB,KAYd6B,EAZc,OAaGnD,mBAAS,IAbZ,mBAapBuB,EAboB,KAaX6B,EAbW,OAcWpD,mBAAS,IAdpB,mBAcpBwB,EAdoB,KAcP6B,EAdO,OAeDrD,mBAAS,IAfR,mBAepByB,EAfoB,KAeb6B,EAfa,OAgBWtD,mBAASkD,EAAgB,IAhBpC,mBAgBpB7B,EAhBoB,KAgBPkC,EAhBO,OAiBWvD,oBAAS,GAjBpB,mBAiBpBwD,EAjBoB,KAiBPC,EAjBO,KAmC3B,OAhBAC,qBAAU,WACNN,EAAWL,EAAMxB,SAAW,IAC5B4B,EAAQJ,EAAMzB,MAAQ,IACtB+B,EAAeN,EAAMvB,aAAe,IACpC8B,EAASP,EAAMtB,OAAS,IACxB8B,EAAeR,EAAM1B,aAAe,MACrC,CAACM,IAUG,uBACGxB,UAAU,eACVC,SAAQ,uCAAE,WAAOC,GAAP,iBAAApB,EAAA,yDACNoB,EAAMC,iBAEAqD,EAAc,CACdrC,OACAC,UACAC,cACAC,QACAJ,gBAEFM,EAVE,0CAYwB9B,EAAS,wDAAD,OAAyD8B,GACxD,QACAgC,GAdjC,OAYIC,EAZJ,OAeFX,EAAcW,EAAYxC,SAC1BqC,GAAe,GACfzC,EAAmB,IAjBjB,kDAmBEc,QAAQC,IAAR,MAnBF,2DAuBIlC,EAAS,uDACa,OACA8D,GAAaxB,MAAK,SAAA0B,GACdJ,GAAe,GACfT,EAAca,EAAWzC,YACxBsB,OAAM,SAAAC,GACLb,QAAQC,IAAIY,MA7B5C,2DAgCJb,QAAQC,IAAR,MAhCI,QAThBqB,EAAW,IACXD,EAAQ,IACRE,EAAe,IACfC,EAAS,IACTC,EAAe,IAKC,kEAAF,sDAFX,UAwCC,yCACA,uBACIhD,KAAK,OACLC,MAAOc,EACPT,YAAY,eACZF,SAAU,SAACN,GAAD,OAAW8C,EAAQ9C,EAAMO,OAAOJ,UAE1C,4CACA,uBACAD,KAAK,OACLC,MAAOe,EACPV,YAAY,kBACZF,SAAU,SAACN,GAAD,OAAW+C,EAAW/C,EAAMO,OAAOJ,UAE7C,iDACA,uBACAD,KAAK,OACLC,MAAOgB,EACPX,YAAY,uBACZF,SAAU,SAACN,GAAD,OAAWgD,EAAehD,EAAMO,OAAOJ,UAEjD,0CACA,uBACAD,KAAK,OACLC,MAAOiB,EACPZ,YAAY,wBACZF,SAAU,SAACN,GAAD,OAAWiD,EAASjD,EAAMO,OAAOJ,UAE3C,iDACA,wBACAA,MAAOa,EACPV,SAAU,SAACN,GAAD,OAAWkD,EAAelD,EAAMO,OAAOJ,QAFjD,SAKQ0C,EAAgB/B,KAAI,SAACZ,EAAM+B,GAC3B,OAAO,wBAAkB9B,MAAOD,EAAzB,SAAgCA,GAAnB+B,QAI5B,wBAAQX,GAAG,SAAX,SAAqBA,EAAK,eAAiB,mBAC3C,cAAC,IAAD,CAAMK,GAAG,IAAT,SAAa,qBAAKL,GAAG,SAAR,sBACX6B,EACE,gCACI,4EACA,sGACK,UC3GvBM,EAAM,WAAO,IAAD,EACwB9D,mBAAS,IADjC,mBACPe,EADO,KACME,EADN,OAEgCjB,mBAAS,IAFzC,mBAEP+D,EAFO,KAEU/C,EAFV,OAGchB,mBAAS,IAHvB,mBAGPgE,EAHO,KAGCC,EAHD,OAIUjE,mBAAS,IAJnB,6BAsBb,SAASkE,IACN,OAAOnD,EAAYa,QAAO,SAACR,GACzB,OAAOA,EAAQE,KAAK6C,cAAcC,SAASJ,EAAOG,kBAcxD,OATAT,oBAAS,sBAAC,sBAAAzE,EAAA,sDACNY,EAAS,wDACJsC,MAAK,SAACzC,GACFuB,EAAevB,EAAS2E,aAE5B3B,MAAMZ,QAAQa,OALb,2CAMP,IAGI,cAAC,IAAD,UACH,eAAC,IAAD,WACI,eAAC,IAAD,CAAO2B,KAAK,QAAZ,UACI,qBAAKnE,UAAU,SAAf,0BACA,cAAC,EAAD,yBAAac,eAAgBA,EACjB+B,cArCxB,SAAuBa,GACnB5C,EAAe,GAAD,mBAAKF,GAAL,CAAkB8C,MAqCZ9C,YAAaA,GACTgD,GAHhB,IAIY/C,mBAAoBA,EACpBiC,cApCxB,SAAuBsB,GACnB,IAAIC,EAAQzD,EAAY0D,WAAU,SAACrD,GAC/B,OAAOA,EAAQO,KAAO4C,EAAe5C,MAEzC,GAAI6C,GAAS,EAAG,CAClB,IAAIE,EAAe,YAAO3D,GAC1B2D,EAAgBF,GAASD,EACzBtD,EAAeyD,WA+BT,eAAC,IAAD,CAAOJ,KAAK,IAAZ,UACI,qBAAKnE,UAAU,SAAf,0BACA,sBAAKwB,GAAG,cAAR,UACI,kDAAoB,cAAC,IAAD,CAAMK,GAAG,QAAT,SAAiB,wBAAQL,GAAG,SAAX,oBACrC,sBAAKA,GAAG,SAAR,UACI,uBAAOgD,QAAQ,WAAf,4BACA,uBACIhD,GAAG,WACHpB,KAAK,OACLM,YAAY,qBACZL,MAAQwD,EACRrD,SAAU,SAACN,GACX4D,EAAU5D,EAAMO,OAAOJ,gBAGnC,sBAAKmB,GAAG,aAAR,UACA,cAAC,EAAD,CAAaZ,YAAamD,IACdjD,eAAgBA,EAChB8C,gBAAiBA,EACjB/C,mBAAoBA,EACpBT,KAAM,SACnB,cAAC,EAAD,CAAaQ,YAAamD,IACbjD,eAAgBA,EAChB8C,gBAAiBA,EACjB/C,mBAAoBA,EACpBT,KAAM,aACnB,cAAC,EAAD,CAAaQ,YAAamD,IACbjD,eAAgBA,EAChB8C,gBAAiBA,EACjB/C,mBAAoBA,EACpBT,KAAM,sBAOlCqE,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.e4ec0272.chunk.js","sourcesContent":["async function fetchAPI(url, method=\"GET\", sendData=null) {\n    const fetchOptions = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFuZHJldyIsImlhdCI6MTYwNTU3OTQ0MiwiZXhwIjoxNjA2MTg0MjQyfQ.DzczKUz2dVrLpdRGayS4yEiHC9aPWPnuqCoCqDstY-s'\n      }\n    };\n  \n    if (sendData) {\n      fetchOptions.body = JSON.stringify(sendData);\n    }\n  \n    const response = await fetch(url, fetchOptions);\n    const data = await response.json();\n  \n    return data;\n  }\n\n  export default fetchAPI;","import React, { useState } from 'react';\nimport './CommentForm.css'\n\nconst CommentForm = ({\n    handleClick,\n}) => {\n    const [comment, setComment] = useState('')\n\n    return <form className='comment-form'\n                 onSubmit={(event) => {\n        event.preventDefault();\n        if (comment) {\n        handleClick(comment)\n        setComment('')\n    }\n    }}>\n        <textarea\n            type='text'\n            value={comment}\n            rows='8'\n            columns=\"80\"\n            onChange={() => {setComment(event.target.value)}}\n            placeholder=\"Comment\"\n            />\n        <button>Comment on Contact</button>\n    </form>\n}\n\nexport default CommentForm","import React, { useState } from 'react'\nimport fetchAPI  from '../api';\nimport './ContactView.css'\nimport CommentForm from './CommentForm'\nimport { Link } from 'react-router-dom'\n\nconst ContactView = ({\n    contactList,\n    setEditableContact,\n    setContactList,\n    type\n}) => {\n\n    return <div className=\"list\">\n        <h1>{type.toUpperCase()}</h1>\n        {contactList.map(contact => {\n            return  type === contact.contactType ? <div key={contact.id}\n                        className='contact'>\n                <div className=\"info\">\n                    <h2>{contact.name} ({contact.contactType})</h2>\n                    <p>Address: {contact.address}</p>\n                    <p>Number: {contact.phoneNumber}</p>\n                    <p>Email: {contact.email}</p>\n                </div>\n                <div className='options'>\n                    <button onClick={async () => {\n                        try {\n                            const url = `https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}`;\n                            const data = await fetchAPI(url, \"DELETE\")\n                            setContactList(contactList.filter(deleted => {\n                                return contact !== deleted\n                            }))\n                        } catch (error) {\n                            console.log(error)\n                        }\n                    }}>Delete</button>\n                    <Link to='/form'><button onClick={() => {\n                        setEditableContact(contact);\n                    }}>Edit</button></Link>\n                    <CommentForm handleClick={async (content) => {\n                        const payload = {\n                            content: content,\n                        }\n\n                        try {\n                            await fetchAPI(`https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}/comments`, \n                                        \"POST\", \n                                        payload)\n                                .then((resp) => {\n                                    const newList = [...contactList];\n                                    let idx = newList.indexOf(contact);\n                                    newList[idx].comments.push(resp.comment)\n                                    setContactList(newList);\n                                    }).catch(console.error)\n                        } catch(error) {console.log(error)}\n                    }} />\n                </div>\n                { contact.comments ? \n                    contact.comments.map((comment, idx) => {\n                    return <div key={idx}\n                                className='comment'>\n                            <p>{comment.content}</p>\n                            <button onClick={async () => {\n                                try {\n                                    await fetchAPI(`https://univ-contact-book.herokuapp.com/api/comments/${comment.id}`, \"DELETE\");\n                                    const newList = [...contactList];\n                                    let idx = newList.indexOf(contact);\n                                    let commentIdx = newList[idx].comments.indexOf(comment)\n                                    newList[idx].comments.splice(commentIdx, 1);\n                                    setContactList(newList);\n                                } catch(error) {\n                                    console.log(error)\n                                }\n                            }}>DELETE</button>\n                        </div>\n                    }) : null\n                }\n            </div> : null\n        })}\n    </div>\n}\n\nexport default ContactView;","import React, { useState, useEffect } from 'react';\nimport fetchAPI from '../api'\nimport './ContactForm.css'\nimport { Link } from 'react-router-dom'\n\nconst ContactForm = (props) => {\n    const {\n        setContactList,\n        contactList,\n        addNewContact,\n        id,\n        updateContact,\n        setEditableContact\n    } = props\n\n    const CONTACT_OPTIONS = ['choose type', 'work', 'personal', 'other']\n\n    const [name, setName] = useState('');\n    const [address, setAddress] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [email, setEmail] = useState('');\n    const [contactType, setContactType] = useState(CONTACT_OPTIONS[0]);\n    const [madeChanges, setMadeChanges] = useState(false);\n\n    useEffect(() => {\n        setAddress(props.address || '')\n        setName(props.name || '')\n        setPhoneNumber(props.phoneNumber || '')\n        setEmail(props.email || '')\n        setContactType(props.contactType || '')\n    }, [id])\n\n    function clearForm() {\n        setAddress('');\n        setName('')\n        setPhoneNumber('')\n        setEmail('');\n        setContactType('')\n    }\n\n    return <form\n              className=\"contact-form\"\n              onSubmit={async (event) => {\n                  event.preventDefault();\n                  \n                  const contactInfo = {\n                        name,\n                        address,\n                        phoneNumber,\n                        email,\n                        contactType\n                    }\n                  if (id) {\n                      try {\n                      const editContact = await fetchAPI(`https://univ-contact-book.herokuapp.com/api/contacts/${id}`,\n                                                         \"PATCH\",\n                                                         contactInfo)\n                      updateContact(editContact.contact);\n                      setMadeChanges(true)\n                      setEditableContact({})\n                      } catch(error) {\n                          console.log(error);\n                      }\n                  } else {\n                  try {\n                      await fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts\", \n                                                  \"POST\", \n                                                  contactInfo).then(newContact => {\n                                                      setMadeChanges(true)\n                                                      addNewContact(newContact.contact)\n                                                    }).catch(error => {\n                                                        console.log(error)\n                                                    })\n                  } catch (error) {\n                    console.log(error)\n                  }\n                }\n\n                  clearForm();\n              }}>\n            <label>Name</label>\n            <input\n                type=\"text\"\n                value={name}\n                placeholder=\"Contact Name\"\n                onChange={(event) => setName(event.target.value)}\n                />\n                <label>Address</label>\n                <input\n                type=\"text\"\n                value={address}\n                placeholder=\"Contact Address\"\n                onChange={(event) => setAddress(event.target.value)}\n                />\n                <label>Phone Number</label>\n                <input\n                type=\"text\"\n                value={phoneNumber}\n                placeholder=\"Contact Phone Number\"\n                onChange={(event) => setPhoneNumber(event.target.value)}\n                />\n                <label>Email</label>\n                <input\n                type=\"text\"\n                value={email}\n                placeholder=\"Contact email address\"\n                onChange={(event) => setEmail(event.target.value)}\n                />\n                <label>Content Type</label>\n                <select\n                value={contactType}\n                onChange={(event) => setContactType(event.target.value)}\n                >\n                    {\n                        CONTACT_OPTIONS.map((type, idx) => {\n                        return <option key={idx} value={type}>{type}</option>\n                        })\n                    }\n                </select>\n                <button id='submit'>{id ? \"Edit Contact\" : \"Create Contact\"}</button>\n                <Link to='/'><div id='return'>Return</div></Link>\n                { madeChanges ? \n                    <div>\n                        <h1>You've made a change to your Contact list!</h1>\n                        <p>Continue to make changes or click above to return to your contacts</p>\n                    </div> : null\n                }\n    </form>\n}\n\nexport default ContactForm;","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport fetchAPI  from './api'\n\nimport {\n    ContactForm,\n    ContactView,\n} from './components'\n\nconst App = () => {\n    const [contactList, setContactList] = useState([])\n    const [editableContact, setEditableContact] = useState({});\n    const [search, setSearch] = useState('');\n    const [type, setType] = useState('')\n\n    function addNewContact(newContact) {\n        setContactList([...contactList, newContact])\n    }\n\n\n    function updateContact(updatedContact) {\n        let index = contactList.findIndex((contact) => {\n            return contact.id === updatedContact.id\n        })\n        if (index > -1) {\n      let contactListCopy = [...contactList];\n      contactListCopy[index] = updatedContact;\n      setContactList(contactListCopy);\n      }\n    }\n\n     function filteredContacts() {\n        return contactList.filter((contact) => {\n          return contact.name.toLowerCase().includes(search.toLowerCase());\n        });\n    }\n    \n\n    useEffect(async () => {\n        fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts\")\n            .then((response) => {\n                 setContactList(response.contacts)\n            })\n            .catch(console.error);\n    }, [])\n\n\n    return <Router>\n        <Switch>\n            <Route path='/form'>\n                <div className='header'>Contact Form</div>\n                <ContactForm setContactList={setContactList}\n                            addNewContact={addNewContact}\n                            contactList={contactList}\n                            {...editableContact}\n                            setEditableContact={setEditableContact}\n                            updateContact={updateContact} />\n            </Route>\n            <Route path='/'>\n                <div className='header'>Contact List</div>\n                <div id='interaction'>\n                    <span>Create Contact<Link to='/form'><button id=\"create\">+</button></Link></span>\n                    <div id=\"search\">\n                        <label htmlFor=\"keywords\">Search by Name</label>\n                        <input \n                            id=\"keywords\" \n                            type=\"text\" \n                            placeholder=\"Enter Contact Name\" \n                            value={ search } \n                            onChange={(event) => {\n                            setSearch(event.target.value);\n                            }} /></div>\n                </div>\n                <div id='split-list'>\n                <ContactView contactList={filteredContacts()}\n                            setContactList={setContactList}\n                            editableContact={editableContact}\n                            setEditableContact={setEditableContact}\n                            type={'work'}/>\n               <ContactView contactList={filteredContacts()}\n                            setContactList={setContactList}\n                            editableContact={editableContact}\n                            setEditableContact={setEditableContact}\n                            type={'personal'}/>\n               <ContactView contactList={filteredContacts()}\n                            setContactList={setContactList}\n                            editableContact={editableContact}\n                            setEditableContact={setEditableContact}\n                            type={'other'}/>\n                </div>\n             </Route>\n        </Switch>\n    </Router>\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app')\n);"],"sourceRoot":""}